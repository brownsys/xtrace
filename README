12/9/2014:  This repository is the up-to-date, regularly maintained implementation of X-Trace.
It is a slimmed down version of X-Trace with an emphasis on performance.  
Some code has been inherited or reused from the Berkeley implementation of X-Trace 2.0.

X-Trace is a framework for tracing the execution of distributed system.  
Out of the box, X-Trace 3.0 offers two main features
* A metadata serialization format and propagation API
* A logging API and database server

Usage:

X-Trace version 3 requires protocol buffers.  Ensure that the protoc executable is on your path.
https://code.google.com/p/protobuf/

X-Trace version 3 requires the Brown University Systems pubsub package, available from github.
You must also clone this repository and install it into your local maven repository:

> git clone git@github.com/brownsys/pubsub pubsub
> cd pubsub
> mvn clean package install

To run a clean build and install of X-Trace:
> mvn clean package install appassembler:assemble

To run performance tests to measure costs of metadata propagation and logging:
> mvn integration-test

X-Trace is configurable using the typesafe config.  Default configuration values are defined in the reference.conf.
You can override these reference values by defining new values in an application.conf and placing it on your classpath.
Configuration values can also be passed using the standard java system properties command line format, 
eg. -Dxtrace.server.hostname=8.8.8.8 

Implementation status:
Brown University xtrace has no officially released versions.  3.0.1 is forthcoming.

Metadata format:

The X-Trace metadata format is completely overhauled and it is incompatible with the metadata format from version 2.
This is a tough decision, but ultimately moving to protocol buffers for serialization will prove useful in future
in terms of extensibility and performance.


Client APIs:

The metadata propagation API and client logging API are brand new.  They are quite concise.  The logging API currently uses
Brown University Pub-Sub as the transport mechanism, which itself is built on Zero-MQ. 


Server:

The X-Trace server reuses much code from X-Trace version 2.  Specifically, the Derby metadata store, file tree data store,
and web front-ends remain in place.  Much of it has been refactored and cruft removed.  Whilst the X-Trace version 3 metadata
format and logging APIs are brand new, the X-Trace version 3 server is backwards compatibile with applications instrumented
with previous versions of X-Trace.
